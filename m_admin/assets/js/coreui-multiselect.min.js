// coreui-multiselect.min.js
// Multiselect modular para múltiples instancias en la misma página o modales, con sufijos únicos.

// Inicializa un multiselect por sufijo (ejemplo: "-ru", "-eru")
function initMultiselect(suffix) {
  const ms = document.getElementById(`multiSelect${suffix}`);
  const list = document.getElementById(`optionsList${suffix}`);
  const selected = document.getElementById(`selectedContainer${suffix}`);
  const hidden = document.getElementById(`hiddenSelect${suffix}`);
  const placeholder = document.getElementById(`placeholder${suffix}`);
  const clearBtn = document.getElementById(`clearBtn${suffix}`);
  const toggleBtn = document.getElementById(`toggleBtn${suffix}`);

  // Evita doble inicialización
  if (!ms || ms.dataset.initialized === 'true') return;
  ms.dataset.initialized = 'true';

  // Abrir/cerrar lista de opciones al hacer click en el wrapper
  ms.addEventListener('click', (e) => {
    if (!e.target.closest('.btn-clear') && !e.target.closest('.btn-toggle')) {
      list.style.display = list.style.display === 'block' ? 'none' : 'block';
    }
  });

  // Cerrar al hacer click fuera del componente
  document.addEventListener('click', (e) => {
    if (!ms.contains(e.target)) {
      list.style.display = 'none';
    }
  });

  // Maneja cambios en los checkboxes
  list.querySelectorAll('input[type="checkbox"]').forEach(input => {
    input.addEventListener('change', update);
  });

  // Botón para limpiar selección
  if (clearBtn) {
    clearBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      list.querySelectorAll('input[type="checkbox"]').forEach(input => input.checked = false);
      update();
    });
  }

  // Botón para abrir/cerrar manualmente
  if (toggleBtn) {
    toggleBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      list.style.display = list.style.display === 'block' ? 'none' : 'block';
    });
  }

  function update() {
    const checked = Array.from(list.querySelectorAll('input[type="checkbox"]:checked'));
    selected.querySelectorAll('.coreui-ms-chip').forEach(chip => chip.remove());
    placeholder.style.display = checked.length === 0 ? 'inline' : 'none';
    checked.forEach(item => {
      const chip = document.createElement('span');
      chip.className = 'coreui-ms-chip';
      chip.textContent = item.parentElement.textContent.trim();
      const remove = document.createElement('button');
      // FontAwesome icon for close (x)
      remove.innerHTML = `<i class="fas fa-times"></i>`;
      remove.onclick = (e) => {
        e.stopPropagation();
        item.checked = false;
        update();
      };
      chip.appendChild(remove);
      selected.appendChild(chip);
    });
    // Sincroniza el <select hidden>
    if (hidden) {
      Array.from(hidden.options).forEach(opt => {
        opt.selected = checked.some(chk => chk.value === opt.value);
      });
    }
  }
  update();
}

// Inicializa todos los multiselects requeridos en los modales
function setupAllMultiselects() {
  initMultiselect('-ru');
  initMultiselect('-eru');
}

// Inicialización automática al cargar y al mostrar modales Bootstrap
document.addEventListener('DOMContentLoaded', () => {
  // Inicializa ambos si están presentes al cargar
  setupAllMultiselects();

  // Bootstrap modal events para inicialización en cada apertura
  const modalRU = document.getElementById('modal-ru');
  const modalERU = document.getElementById('modal-eru');
  if (modalRU) {
    modalRU.addEventListener('shown.bs.modal', () => {
      initMultiselect('-ru');
    });
  }
  if (modalERU) {
    modalERU.addEventListener('shown.bs.modal', () => {
      initMultiselect('-eru');
    });
  }
});

// Para inicializar otro multiselect, usa initMultiselect con el sufijo adecuado, ejemplo:
// initMultiselect('-otro');